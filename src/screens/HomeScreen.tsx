import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, SafeAreaView, TouchableOpacity, StatusBar, FlatList, Alert } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../navigation/AppNavigator';
import { useFoodStore, FoodItem } from '../store/foodStore';
import { useCalorieGoalStore } from '../store/calorieGoalStore';
import { useTheme, Menu, Divider, Card } from 'react-native-paper';
import WeeklyCalendar from '../components/WeeklyCalendar';
import CaloriesCard from '../components/CaloriesCard';
import MacrosCard from '../components/MacrosCard';
import FoodEntryBar from '../components/FoodEntryBar';
import { Gesture, GestureDetector } from 'react-native-gesture-handler';

type HomeScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Ana Sayfa'>;

// Aynƒ± tarihte olup olmadƒ±ƒüƒ±nƒ± kontrol eden yardƒ±mcƒ± fonksiyon
const isSameDay = (date1: string, date2: Date): boolean => {
  const d1 = new Date(date1);
  return (
    d1.getFullYear() === date2.getFullYear() &&
    d1.getMonth() === date2.getMonth() &&
    d1.getDate() === date2.getDate()
  );
};

const HomeScreen = () => {
  const navigation = useNavigation<HomeScreenNavigationProp>();
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [menuVisible, setMenuVisible] = useState(false);
  const [dailyFoods, setDailyFoods] = useState<FoodItem[]>([]);
  const theme = useTheme();
  
  const styles = makeStyles(theme.colors);
  
  // Yemek ve kalori hedefi verilerini √ßek
  const { foods, calculateDailyCalories, calculateDailyNutrients } = useFoodStore();
  const { calorieGoal, nutrientGoals } = useCalorieGoalStore();
  
  // Se√ßilen g√ºn√ºn deƒüerlerini hesapla
  const dailyCalories = calculateDailyCalories(selectedDate.toISOString());
  const dailyNutrients = calculateDailyNutrients(selectedDate.toISOString());
  
  // Kalan kalorileri hesapla
  const remainingCalories = Math.max(0, calorieGoal - dailyCalories);

  // Se√ßilen tarihe g√∂re yemekleri filtreleme
  useEffect(() => {
    const filteredFoods = foods.filter(food => 
      isSameDay(food.date, selectedDate)
    );
    setDailyFoods(filteredFoods);
  }, [foods, selectedDate]);

  // Tema ayarlarƒ± sayfasƒ±na git
  const handleOpenThemeSettings = () => {
    navigation.navigate('ThemeSettings');
  };

  // ƒ∞statistikler sayfasƒ±na git
  const handleOpenStats = () => {
    navigation.navigate('Stats');
  };
  
  // API ayarlarƒ± sayfasƒ±na git
  const handleOpenApiSettings = () => {
    navigation.navigate('ApiSettings');
    setMenuVisible(false);
  };
  
  // Fiyatlandƒ±rma sayfasƒ±na git
  const handleOpenPricingScreen = () => {
    navigation.navigate('Pricing');
    setMenuVisible(false);
  };
  
  // Kalori hedefi sayfasƒ±na git
  const handleOpenCalorieGoalScreen = () => {
    navigation.navigate('CalorieGoal');
    setMenuVisible(false);
  };
  
  // Men√ºy√º a√ß/kapa
  const toggleMenu = () => setMenuVisible(!menuVisible);

  // Yemek t√ºr√ºne g√∂re emoji se√ßme
  const getFoodEmoji = (foodName: string | undefined) => {
    // foodName undefined veya null ise varsayƒ±lan emoji d√∂nd√ºr
    if (!foodName) return 'üçΩÔ∏è';
    
    try {
      const lowerName = foodName.toLowerCase();
      const words = lowerName.split(/\s+/); // Bo≈üluklarla kelimelere ayƒ±r
      
      // Daha √∂zel yemek t√ºrleri (√∂ncelikli)
      if (hasWord(lowerName, ['dolma', 'sarma'])) return 'üçÉ';
      if (hasWord(lowerName, ['kebap', 'kebab', '≈üi≈ü'])) return 'üç¢';
      if (hasWord(lowerName, ['√ßorba', 'soup'])) return 'üç≤';
      if (hasWord(lowerName, ['pilav', 'rice', 'pirin√ß'])) return 'üçö';
      if (hasWord(lowerName, ['kƒ±zartma', 'fƒ±rƒ±nda', 'frying'])) return 'üç≥';
      if (hasWord(lowerName, ['b√∂rek', 'poƒüa√ßa', 'a√ßma'])) return 'ü•ê';
      if (hasWord(lowerName, ['pizza'])) return 'üçï';
      if (hasWord(lowerName, ['hamburger', 'burger'])) return 'üçî';
      if (hasWord(lowerName, ['tavuk', 'chicken'])) return 'üçó';
      if (hasWord(lowerName, ['balƒ±k', 'fish'])) return 'üêü';
      if (hasWord(lowerName, ['makarna', 'pasta', 'spagetti', 'noodle'])) return 'üçù';
      if (hasWord(lowerName, ['salata', 'salad'])) return 'ü•ó';
      if (hasWord(lowerName, ['muz', 'banana'])) return 'üçå';
      if (hasWord(lowerName, ['elma', 'apple'])) return 'üçé';
      if (hasWord(lowerName, ['portakal', 'orange'])) return 'üçä';
      if (hasWord(lowerName, ['√ßikolata', 'chocolate'])) return 'üç´';
      if (hasWord(lowerName, ['dondurma', 'ice cream'])) return 'üç¶';
      if (hasWord(lowerName, ['kahve', 'coffee'])) return '‚òï';
      if (hasWord(lowerName, ['√ßay', 'tea'])) return 'üçµ';
      if (hasWord(lowerName, ['kek', 'cake', 'pasta'])) return 'üç∞';
      if (hasWord(lowerName, ['s√ºt', 'milk', 'yoƒüurt', 'yogurt'])) return 'ü•õ';
      if (hasWord(lowerName, ['ekmek', 'bread'])) return 'üçû';
      
      // Daha genel yemek t√ºrleri (d√º≈ü√ºk √∂ncelikli)
      if (hasWord(lowerName, ['et', 'meat', 'steak', 'biftek'])) return 'ü•©';
      if (hasWord(lowerName, ['yumurta', 'egg'])) return 'üç≥';
      
      // Varsayƒ±lan kategori bulunamadƒ±ysa
      return 'üçΩÔ∏è';
    } catch (error) {
      console.error('Emoji se√ßme hatasƒ±:', error);
      return 'üçΩÔ∏è'; // Hata durumunda varsayƒ±lan emoji
    }
  };
  
  // Kelime e≈üle≈ütirme yardƒ±mcƒ± fonksiyonu
  const hasWord = (text: string, keywords: string[]): boolean => {
    // Her bir anahtar kelimeyi kontrol et
    for (const keyword of keywords) {
      // Kelimenin ba≈üƒ±nda, sonunda veya ayrƒ± bir kelime olarak olup olmadƒ±ƒüƒ±nƒ± kontrol et
      // √ñrnek: "et" kelimesi "diet" i√ßinde e≈üle≈ümemeli, ama "et yemeƒüi" i√ßinde e≈üle≈ümeli
      const regex = new RegExp(`\\b${keyword}\\b|^${keyword}|${keyword}$`, 'i');
      if (regex.test(text)) {
        return true;
      }
    }
    return false;
  };

  // √ñƒü√ºn t√ºr√º emojisi
  const getMealTypeEmoji = (mealType: string) => {
    switch (mealType) {
      case 'breakfast': return 'üç≥';
      case 'lunch': return 'üç≤';
      case 'dinner': return 'üçΩÔ∏è';
      case 'snack': return 'üçå';
      default: return 'üç¥';
    }
  };

  // Yemek √∂ƒüesini g√∂r√ºnt√ºleme
  const renderFoodItem = ({ item }: { item: FoodItem }) => (
    <Card style={styles.foodCard} onPress={() => {
      // D√ºzenleme i≈ülevini √ßaƒüƒ±r
      navigation.navigate('FoodEntry', { 
        editMode: true, 
        foodItem: item 
      });
    }}>
      <View style={styles.foodItemContainer}>
        <Text style={styles.mealTypeEmoji}>{getFoodEmoji(item.name)}</Text>
        <View style={styles.foodDetails}>
          <Text style={styles.foodName}>{item.name}</Text>
          <Text style={styles.foodCalories}>{item.calories} kcal</Text>
        </View>
        <View style={styles.foodMacros}>
          <Text style={styles.macroText}>P: {Number(item.protein).toFixed(1).replace(/\.0$/, '')}g</Text>
          <Text style={styles.macroText}>C: {Number(item.carbs).toFixed(1).replace(/\.0$/, '')}g</Text>
          <Text style={styles.macroText}>Y: {Number(item.fat).toFixed(1).replace(/\.0$/, '')}g</Text>
        </View>
        <TouchableOpacity 
          style={styles.deleteButton}
          onPress={(e) => {
            e.stopPropagation();
            Alert.alert(
              'Yemeƒüi Sil',
              'Bu yemeƒüi silmek istediƒüinizden emin misiniz?',
              [
                { text: 'ƒ∞ptal', style: 'cancel' },
                { text: 'Sil', 
                  onPress: async () => {
                    try {
                      await useFoodStore.getState().removeFood(item.id);
                    } catch (error) {
                      console.error('Yemek silinirken hata olu≈ütu:', error);
                      Alert.alert('Hata', 'Yemek silinirken bir hata olu≈ütu.');
                    }
                  }, 
                  style: 'destructive' 
                }
              ]
            );
          }}
        >
          <Text style={styles.deleteIcon}>üóëÔ∏è</Text>
        </TouchableOpacity>
      </View>
    </Card>
  );

  // Bo≈ü liste yerini tutan √∂ƒüe
  const EmptyListComponent = () => (
    <View style={styles.emptyListContainer}>
      <Text style={styles.emptyListText}>
        Bu tarihte kayƒ±tlƒ± yemek bulunmamaktadƒ±r.
      </Text>
    </View>
  );

  const getDayLabel = () => {
    // Bug√ºn√ºn tarihiyle kar≈üƒ±la≈ütƒ±r
    const today = new Date();
    const isToday = 
      today.getDate() === selectedDate.getDate() && 
      today.getMonth() === selectedDate.getMonth() && 
      today.getFullYear() === selectedDate.getFullYear();
    
    if (isToday) return 'Bug√ºn';
    
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const isYesterday = 
      yesterday.getDate() === selectedDate.getDate() && 
      yesterday.getMonth() === selectedDate.getMonth() && 
      yesterday.getFullYear() === selectedDate.getFullYear();
    
    if (isYesterday) return 'D√ºn';
    
    // T√ºrk√ße tarih formatƒ±
    return selectedDate.toLocaleDateString('tr-TR', { 
      day: 'numeric',
      month: 'long', 
      year: 'numeric'
    });
  };

  // Sonraki g√ºne ge√ßme fonksiyonu
  const goToNextDay = () => {
    const nextDay = new Date(selectedDate);
    nextDay.setDate(nextDay.getDate() + 1);
    setSelectedDate(nextDay);
  };
  
  // √ñnceki g√ºne ge√ßme fonksiyonu
  const goToPreviousDay = () => {
    const previousDay = new Date(selectedDate);
    previousDay.setDate(previousDay.getDate() - 1);
    setSelectedDate(previousDay);
  };
  
  // Kalori durumunu hesaplayan fonksiyon
  const getCalorieStatus = (date: Date): 'complete' | 'incomplete' | 'exceeded' | undefined => {
    try {
      // Tarih bi√ßimini ayarla
      const dateString = date.toISOString();
      
      // G√ºn√ºn kalori deƒüerlerini hesapla
      const dayCalories = calculateDailyCalories(dateString);
      
      // G√ºn√ºn kalori durumunu deƒüerlendir
      const calorieCompletion = (dayCalories / calorieGoal) * 100;
      
      if (dayCalories === 0) {
        // Veri yoksa undefined d√∂nd√ºr (renklendirme yapƒ±lmaz)
        return undefined;
      } else if (calorieCompletion >= 95 && calorieCompletion <= 105) {
        // %95-105 aralƒ±ƒüƒ±nda ise tamamlanmƒ±≈ü kabul et (hedef tutturulmu≈ü)
        return 'complete';
      } else if (calorieCompletion > 105) {
        // %105'ten fazla ise a≈üƒ±lmƒ±≈ü kabul et
        return 'exceeded';
      } else {
        // %95'ten az ise tamamlanmamƒ±≈ü kabul et
        return 'incomplete';
      }
    } catch (error) {
      console.error('Kalori durumu hesaplanƒ±rken hata:', error);
      return undefined;
    }
  };
  
  // Basit kaydƒ±rma tanƒ±mlamasƒ± - Pan kullanarak
  const swipeGesture = Gesture.Pan()
    .runOnJS(true)
    .onEnd((event) => {
      // Sadece belirgin yatay hareketleri algƒ±la
      if (Math.abs(event.translationX) < 50) return;
      
      // Yatay hareketin dikey hareketten daha g√º√ßl√º olduƒüunu kontrol et
      if (Math.abs(event.translationX) > Math.abs(event.translationY)) {
        // Saƒüa kaydƒ±rma (soldan saƒüa) -> √∂nceki g√ºn
        if (event.translationX > 0) {
          goToPreviousDay();
        } 
        // Sola kaydƒ±rma (saƒüdan sola) -> sonraki g√ºn
        else {
          goToNextDay();
        }
      }
    });

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar
        backgroundColor={theme.colors.background}
        barStyle={theme.dark ? 'light-content' : 'dark-content'}
      />
      
      {/* √úST B√ñL√úM: Header ve Takvim */}
      <View style={styles.topSection}>
        {/* Tarih ve Butonlar */}
        <View style={styles.todayContainer}>
          <Text style={styles.todayText}>{getDayLabel()}</Text>
          <View style={styles.headerButtons}>
            <TouchableOpacity 
              style={styles.iconButton}
              onPress={handleOpenStats}
            >
              <Text style={styles.themeIcon}>üìä</Text>
            </TouchableOpacity>
            <TouchableOpacity 
              style={styles.iconButton}
              onPress={handleOpenThemeSettings}
            >
              <Text style={styles.themeIcon}>{theme.dark ? 'üåô' : '‚òÄÔ∏è'}</Text>
            </TouchableOpacity>
            
            <Menu
              visible={menuVisible}
              onDismiss={() => setMenuVisible(false)}
              anchor={
                <TouchableOpacity style={styles.iconButton} onPress={toggleMenu}>
                  <Text style={styles.themeIcon}>‚öôÔ∏è</Text>
                </TouchableOpacity>
              }
            >
              <Menu.Item 
                onPress={handleOpenCalorieGoalScreen} 
                title="Kalori Hedefi" 
                leadingIcon="target"
              />
              <Menu.Item 
                onPress={handleOpenApiSettings} 
                title="API Ayarlarƒ±" 
                leadingIcon="api"
              />
              <Menu.Item 
                onPress={handleOpenPricingScreen}
                title="Abonelik Planlarƒ±" 
                leadingIcon="cash" 
              />
              <Divider />
              <Menu.Item 
                onPress={() => {
                  navigation.navigate('Profile');
                  setMenuVisible(false);
                }}
                title="Profil" 
                leadingIcon="account" 
              />
            </Menu>
          </View>
        </View>
        
        {/* Takvim */}
        <WeeklyCalendar 
          selectedDate={selectedDate}
          onSelectDate={setSelectedDate}
          getCalorieStatus={getCalorieStatus}
        />
      </View>
      
      {/* ORTA B√ñL√úM: Yemek Listesi (kaydƒ±rƒ±labilir) */}
      <GestureDetector gesture={swipeGesture}>
        <View style={styles.middleSection}>
          <FlatList
            data={dailyFoods}
            renderItem={renderFoodItem}
            keyExtractor={item => item.id}
            ListEmptyComponent={EmptyListComponent}
            contentContainerStyle={dailyFoods.length === 0 ? styles.emptyListContentContainer : styles.foodListContentContainer}
            scrollEnabled={true}
            scrollEventThrottle={16} // Kaydƒ±rma olaylarƒ±nƒ± 60 FPS i√ßin optimize et
          />
        </View>
      </GestureDetector>
      
      {/* ALT B√ñL√úM: Kalori ve Makro Kartlarƒ± */}
      <View style={styles.bottomSection}>
        <View style={styles.cardsContainer}>
          <CaloriesCard 
            food={dailyCalories}
            exercise={0} // Egzersiz kalorisi hen√ºz eklenmiyor
            remaining={remainingCalories}
          />
          
          <MacrosCard 
            carbs={{ current: dailyNutrients.carbs, goal: nutrientGoals.carbs }}
            protein={{ current: dailyNutrients.protein, goal: nutrientGoals.protein }}
            fat={{ current: dailyNutrients.fat, goal: nutrientGoals.fat }}
          />
        </View>
      </View>
      
      {/* EN ALT: Yemek Giri≈ü √áubuƒüu */}
      <FoodEntryBar />
    </SafeAreaView>
  );
};

const makeStyles = (colors: any) => StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  topSection: {
    backgroundColor: colors.background,
  },
  middleSection: {
    flex: 1,
    backgroundColor: colors.background,
  },
  bottomSection: {
    backgroundColor: colors.background,
    paddingHorizontal: 16,
    paddingVertical: 10,
    marginBottom: 100, // FoodEntryBar i√ßin daha fazla yer
  },
  todayContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  todayText: {
    fontSize: 28,
    fontWeight: 'bold',
    color: colors.onSurface,
  },
  headerButtons: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  iconButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 20,
    marginLeft: 8,
  },
  themeIcon: {
    fontSize: 24,
  },
  cardsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'stretch',
    height: 120, // Kartlarƒ±n y√ºksekliƒüi azaltƒ±ldƒ±
  },
  foodListContentContainer: {
    paddingHorizontal: 16,
    paddingTop: 8,
    paddingBottom: 8,
  },
  emptyListContentContainer: {
    paddingHorizontal: 16,
    paddingTop: 16,
    paddingBottom: 16,
    flex: 1,
    justifyContent: 'center',
  },
  foodCard: {
    marginBottom: 10,
    backgroundColor: colors.surface,
    borderRadius: 10,
  },
  foodItemContainer: {
    flexDirection: 'row',
    padding: 12,
    alignItems: 'center',
  },
  mealTypeEmoji: {
    fontSize: 24,
    marginRight: 12,
  },
  foodDetails: {
    flex: 1,
  },
  foodName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: colors.onSurface,
  },
  foodCalories: {
    fontSize: 14,
    color: colors.onSurface,
    opacity: 0.7,
  },
  foodMacros: {
    flexDirection: 'row',
    gap: 8,
  },
  macroText: {
    fontSize: 12,
    color: colors.onSurface,
    opacity: 0.7,
  },
  emptyListContainer: {
    padding: 20,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: colors.surfaceVariant,
    borderRadius: 10,
  },
  emptyListText: {
    fontSize: 16,
    color: colors.onSurface,
    textAlign: 'center',
  },
  deleteButton: {
    padding: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  deleteIcon: {
    fontSize: 20,
  },
});

export default HomeScreen; 